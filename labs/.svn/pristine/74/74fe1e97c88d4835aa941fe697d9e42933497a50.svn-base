/*
 * proxy.c - ICS Web proxy
 *
 *
 */

#include "csapp.h"
#include <stdarg.h>
#include <netinet/tcp.h>


/*
 * Function prototypes
 */
int parse_uri(char *uri, char *target_addr, char *path, char *port);
void format_log_entry(char *logstring, struct sockaddr_in *sockaddr, char *uri, size_t size);
void doit(int fd, struct sockaddr_storage *clientaddr);
int write_headers(int clientfd, char *request, rio_t *rio);

ssize_t Rio_readn_w(int fd, void *ptr, size_t nbytes);
int Rio_writen_w(int fd, void *usrbuf, size_t n);
ssize_t Rio_readnb_w(rio_t *rp, void *usrbuf, size_t n);
ssize_t Rio_readlineb_w(rio_t *rp, void *usrbuf, size_t maxlen);


void *thread(void *vargp);

/***************************************************************************/
/* $begin thread_socket_t */
typedef struct{
    int connfd;               /* connected fd */
    struct sockaddr_storage * clientaddr;  /* client socket address */
} thread_socket_t;

/* $end thread_socket_t */

/* $begin sbuft */
typedef struct {
    thread_socket_t * *buf;         /* Buffer array */         
    int n;                          /* Maximum number of slots */
    int front;                      /* buf[(front+1)%n] is first item */
    int rear;                       /* buf[rear%n] is last item */
    sem_t mutex;                    /* Protects accesses to buf */
    sem_t slots;                    /* Counts available slots */
    sem_t items;                    /* Counts available items */
} sbuf_t;
/* $end sbuft */



void sbuf_init(sbuf_t *sp, int n);
void sbuf_deinit(sbuf_t *sp);
void sbuf_insert(sbuf_t *sp, thread_socket_t * item);
thread_socket_t * sbuf_remove(sbuf_t *sp);

/* Create an empty, bounded, shared FIFO buffer with n slots */
/* $begin sbuf_init */
void sbuf_init(sbuf_t *sp, int n)
{
    sp->buf = Calloc(n, sizeof(thread_socket_t *)); 
    sp->n = n;                       /* Buffer holds max of n items */
    sp->front = sp->rear = 0;        /* Empty buffer iff front == rear */
    Sem_init(&sp->mutex, 0, 1);      /* Binary semaphore for locking */
    Sem_init(&sp->slots, 0, n);      /* Initially, buf has n empty slots */
    Sem_init(&sp->items, 0, 0);      /* Initially, buf has zero data items */
}
/* $end sbuf_init */

/* Clean up buffer sp */
/* $begin sbuf_deinit */
void sbuf_deinit(sbuf_t *sp)
{
    Free(sp->buf);
}
/* $end sbuf_deinit */

/* Insert item onto the rear of shared buffer sp */
/* $begin sbuf_insert */

void sbuf_insert(sbuf_t *sp, thread_socket_t * item)
{
    P(&sp->slots);                          /* Wait for available slot */
    P(&sp->mutex);                          /* Lock the buffer */
    sp->buf[(++sp->rear)%(sp->n)]=item;     /* Insert the item */
    V(&sp->mutex);                          /* Unlock the buffer */
    V(&sp->items);                          /* Announce available item */
}
/* $end sbuf_insert */

/* Remove and return the first item from buffer sp */
/* $begin sbuf_remove */
thread_socket_t * sbuf_remove(sbuf_t *sp)
{
    thread_socket_t * item;
    P(&sp->items);                          /* Wait for available item */
    P(&sp->mutex);                          /* Lock the buffer */
    item = sp->buf[(++sp->front)%(sp->n)];  /* Remove the item */
    V(&sp->mutex);                          /* Unlock the buffer */
    V(&sp->slots);                          /* Announce available slot */
    return item;
}

/* $end sbuf_remove */
/* $end sbufc */
/****************************************************************************/



/*
 * main - Main routine for the proxy program
 */

#define NTHREADS  10
#define SUBFSIZE 20;
sbuf_t sbuf;
sem_t mutex;

 
int main(int argc, char **argv)
{
    int listenfd, connfd;
    socklen_t clientlen=sizeof(struct sockaddr_in);
    thread_socket_t *threadsock;
    pthread_t tid;
    
    if(argc !=2 ){
        fprintf(stderr, "usage: %s <port>\n", argv[0]);
        exit(1);
    }
    
    sbuf_init(&sbuf, 20);
    
    Sem_init(&mutex, 0, 1);
    
    listenfd=Open_listenfd(argv[1]);
    
    signal(SIGPIPE, SIG_IGN); 
    
    for(int i=0;i<NTHREADS;i++){
        Pthread_create(&tid, NULL, thread, NULL);
    }
           
    while(1){
        threadsock=Malloc(sizeof(thread_socket_t));
        threadsock->clientaddr=Malloc(sizeof(struct sockaddr_storage));
        connfd=Accept(listenfd, (SA *) (threadsock->clientaddr), &clientlen);
        threadsock->connfd=connfd;
        //getnameinfo((SA *)clientaddr, clientlen, hostname, MAXLINE, port, MAXLINE, 0);
        sbuf_insert(&sbuf, threadsock);
        //doit(connfd, clientaddr);
        //Close(connfd);
    }
    sbuf_deinit(&sbuf);
    Pthread_exit(NULL);
    return 1;
}

void *thread(void *vargp){
    Pthread_detach(pthread_self());
printf("thread %ld\n", pthread_self());
    while(1){
        thread_socket_t * threadsock=sbuf_remove(&sbuf);
      printf("thread %ld\n", pthread_self());
        doit(threadsock->connfd, threadsock->clientaddr);
        Close(threadsock->connfd);
        Free(threadsock->clientaddr);
        Free(threadsock);
    }
}

void doit(int fd, struct sockaddr_storage * clientaddr){
    char buf[MAXLINE], method[MAXLINE], uri[MAXLINE], version[MAXLINE];
    char hostname[MAXLINE], pathname[MAXLINE], port[8];
    rio_t rio;
    
    Rio_readinitb(&rio, fd);
    if(Rio_readlineb_w(&rio, buf, MAXLINE)!=0){
        if(!strstr(buf, "\r\n")){
            return;
        }
        printf("%s", buf);
        rio_t cli_rio;
        int clientfd;
        sscanf(buf, "%s %s %s", method, uri, version);
        parse_uri(uri, hostname, pathname, port);
        
        clientfd=open_clientfd(hostname, port);
        
        if(clientfd<0){
            return;
        }
        
        Rio_readinitb(&cli_rio, clientfd);
        char request[MAXLINE];
        sprintf(request, "%s /%s %s\r\n", method, pathname, version);
        
        int rn=0, content_length=0, readn, length=0;
        int req_length=write_headers(clientfd, request, &rio);
        if(req_length<0){
            Close(clientfd);
            return;
        }
        
        if(req_length>0){
            readn=req_length;
            //printf("readn:%d\n", readn);
            while((rn=Rio_readnb_w(&rio, buf, readn))!=0){
                if(Rio_writen_w(clientfd, buf, rn)!=rn){
                    Close(clientfd);
                    Free(clientaddr);
                    return;
                }
                if(rn==readn){
                //printf("errono message: %s\n", strerror(errno));
                    break;
                }
                readn=readn-rn;
            }
            if(rn!=readn){
                Free(clientaddr);
                Close(clientfd);
                return;
            }
        }
        //printf("response\n");
        while((rn=Rio_readlineb_w(&cli_rio, buf, MAXLINE))>2){
            //printf("%s", buf);
            if(strncasecmp(buf, "Content-length", 14)==0){
                content_length=atoi(strchr(buf, ':')+1);
            }
            length=length+rn;
            if(Rio_writen_w(fd, buf, rn)!=rn){
                Close(clientfd);return;
            }
        }
        if(rn==0){
            Close(clientfd);
            return;
        }    
        if(Rio_writen_w(fd, "\r\n", 2)!=2){
            Close(clientfd);
            return;
        }
        
        if(content_length>0){
            int readedn=0;
            while((rn=Rio_readnb_w(&cli_rio, buf, 1))!=0){
                if(Rio_writen_w(fd, buf, rn)!=rn){
                    Close(clientfd);return;
                }
                readedn+=rn;
                if(readedn==content_length)break;
            }
            if(readedn!=content_length){
                Close(clientfd);return;
            }
            /*
            readn=content_length<MAXLINE-1?content_length:MAXLINE-1;
            int readedn=0;
            while((rn=Rio_readnb_w(&cli_rio, buf, readn))!=0){
                if(readn< MAXLINE && rn<readn){
                    Close(clientfd);return;
                }
                if(Rio_writen_w(fd, buf, rn)!=rn){
                    Close(clientfd);return;
                }
                readedn+=rn;
                if(readedn==content_length)break;
                readn=content_length-readedn;
                readn=readn<MAXLINE-1?readn:MAXLINE-1;
            }
            if(readedn!=content_length){
                Close(clientfd);return;
            }
            */
            /*
            readn=content_length;
            while((rn=Rio_readnb_w(&cli_rio, buf, readn))!=0){
                if(readn< MAXLINE && rn<readn){
                    Free(clientaddr);
                    Close(clientfd);return;
                }
                if(Rio_writen_w(fd, buf, rn)!=rn){
                    Free(clientaddr);
                    Close(clientfd);return;
                }
                //printf("resp: %s", buf);
                if(rn==readn)break;
                readn=readn-rn;
            }
            if(rn!=readn){
                Free(clientaddr);
                Close(clientfd);return;
            }
            */
        }
        
        
        //printf("end\n");
        char logstring[MAXLINE];
        format_log_entry(logstring, (struct sockaddr_in *)clientaddr, uri, length+content_length+2);
        P(&mutex);
        printf("%s\n", logstring);
        V(&mutex);
        Close(clientfd);
    }
}

int write_headers(int clientfd, char *request, rio_t *riop){
    char buf[MAXLINE];
    int length=0;
    Rio_readlineb_w(riop, buf, MAXLINE);
    if(strlen(buf)==0)
        return -1;
    if(Rio_writen_w(clientfd, request, strlen(request))!=strlen(request))
        return -1;
    while(strcmp(buf, "\r\n")){
        //printf("%s", buf);
        if(strncasecmp(buf, "Content-length", 14)==0){
            length=atoi(strchr(buf, ':')+1);
        }
        if(Rio_writen_w(clientfd, buf, strlen(buf))!=strlen(buf)) 
            return -1;
        if(Rio_readlineb_w(riop, buf, MAXLINE)==0)
            return -1;
        if(!strstr(buf, "\r\n"))
            return -1;
    }

    if(Rio_writen_w(clientfd, "\r\n", 2)!=2) 
        return -1;
    return length;
}

/*
 * parse_uri - URI parser
 *
 * Given a URI from an HTTP proxy GET request (i.e., a URL), extract
 * the host name, path name, and port.  The memory for hostname and
 * pathname must already be allocated and should be at least MAXLINE
 * bytes. Return -1 if there are any problems.
 */
int parse_uri(char *uri, char *hostname, char *pathname, char *port)
{
    char *hostbegin;
    char *hostend;
    char *pathbegin;
    int len;

    if (strncasecmp(uri, "http://", 7) != 0) {
        hostname[0] = '\0';
        return -1;
    }

    /* Extract the host name */
    hostbegin = uri + 7;
    hostend = strpbrk(hostbegin, " :/\r\n\0");
    if (hostend == NULL)
        return -1;
    len = hostend - hostbegin;
    strncpy(hostname, hostbegin, len);
    hostname[len] = '\0';

    /* Extract the port number */
    if (*hostend == ':') {
        char *p = hostend + 1;
        while (isdigit(*p))
            *port++ = *p++;
        *port = '\0';
    } else {
        strcpy(port, "80");
    }

    /* Extract the path */
    pathbegin = strchr(hostbegin, '/');
    if (pathbegin == NULL) {
        pathname[0] = '\0';
    }
    else {
        pathbegin++;
        strcpy(pathname, pathbegin);
    }

    return 0;
}

/*
 * format_log_entry - Create a formatted log entry in logstring.
 *
 * The inputs are the socket address of the requesting client
 * (sockaddr), the URI from the request (uri), the number of bytes
 * from the server (size).
 */
void format_log_entry(char *logstring, struct sockaddr_in *sockaddr,
                      char *uri, size_t size)
{
    time_t now;
    char time_str[MAXLINE];
    unsigned long host;
    unsigned char a, b, c, d;

    /* Get a formatted time string */
    now = time(NULL);
    strftime(time_str, MAXLINE, "%a %d %b %Y %H:%M:%S %Z", localtime(&now));

    /*
     * Convert the IP address in network byte order to dotted decimal
     * form. Note that we could have used inet_ntoa, but chose not to
     * because inet_ntoa is a Class 3 thread unsafe function that
     * returns a pointer to a static variable (Ch 12, CS:APP).
     */
    host = ntohl(sockaddr->sin_addr.s_addr);
    a = host >> 24;
    b = (host >> 16) & 0xff;
    c = (host >> 8) & 0xff;
    d = host & 0xff;

    /* Return the formatted log entry string */
    sprintf(logstring, "%s: %d.%d.%d.%d %s %zu", time_str, a, b, c, d, uri, size);
}

ssize_t Rio_readn_w(int fd, void *ptr, size_t nbytes) 
{
    ssize_t n;
  
    if ((n = rio_readn(fd, ptr, nbytes)) < 0){
        printf("Rio_readn error: %s\n", strerror(errno));
        return 0;
    }
    return n;
}


int Rio_writen_w(int fd, void *usrbuf, size_t n) 
{
    if (rio_writen(fd, usrbuf, n) != n){
        printf("Rio_writen error: %s\n", strerror(errno));
        return 0;
    }
    return n;
}

ssize_t Rio_readnb_w(rio_t *rp, void *usrbuf, size_t n) 
{
    ssize_t rc;

    if ((rc = rio_readnb(rp, usrbuf, n)) < 0){
        printf("Rio_readnb error %s\n", strerror(errno));
        return 0;
    }
    return rc;
}

ssize_t Rio_readlineb_w(rio_t *rp, void *usrbuf, size_t maxlen) 
{
    ssize_t rc;

    if ((rc = rio_readlineb(rp, usrbuf, maxlen)) < 0){
        printf("Rio_readlineb error: %s\n", strerror(errno));
        return 0;
    }
    if(!strstr(usrbuf, "\r\n")) return 0;
    return rc;
} 


